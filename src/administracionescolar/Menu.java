
package administracionescolar;

import java.io.*;
import java.util.*;

public class Menu extends javax.swing.JFrame {
int i;
    public Menu() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ingresarDocente = new javax.swing.JButton();
        ingresarAlumnoPorPantalla = new javax.swing.JButton();
        ingresarAlumnoPorArchivo = new javax.swing.JButton();
        modificarNotaAlumnoCuatrimestre = new javax.swing.JButton();
        calcularPromedioGeneral = new javax.swing.JButton();
        mostrarLibretaAlumno = new javax.swing.JButton();
        almacenamientoEnArchivoAlumnosRecuperan = new javax.swing.JButton();
        verMejoresAlumnosPorAño = new javax.swing.JButton();
        verDocenteDictaMateria = new javax.swing.JButton();
        verMateriaConMasAlumnosARendir = new javax.swing.JButton();
        almacenamientoArchivoAlumnosPindeReadmision = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("¡Bienvenido al sistema de administracion escolar!");

        jLabel2.setText("Qué desea hacer?");

        ingresarDocente.setText("Ingresar docente");
        ingresarDocente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarDocenteActionPerformed(evt);
            }
        });

        ingresarAlumnoPorPantalla.setText("Ingresar alumno por pantalla");
        ingresarAlumnoPorPantalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarAlumnoPorPantallaActionPerformed(evt);
            }
        });

        ingresarAlumnoPorArchivo.setText("Ingresar alumno por archivo");
        ingresarAlumnoPorArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarAlumnoPorArchivoActionPerformed(evt);
            }
        });

        modificarNotaAlumnoCuatrimestre.setText("Modificacion de las notas de alumno por cuatrimestre");
        modificarNotaAlumnoCuatrimestre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarNotaAlumnoCuatrimestreActionPerformed(evt);
            }
        });

        calcularPromedioGeneral.setText("Calculo de Promedio General de alumno");
        calcularPromedioGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularPromedioGeneralActionPerformed(evt);
            }
        });

        mostrarLibretaAlumno.setText("Mostrar libreta de un alumno");
        mostrarLibretaAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarLibretaAlumnoActionPerformed(evt);
            }
        });

        almacenamientoEnArchivoAlumnosRecuperan.setText("Almacenamiento de alumnos que recuperan");
        almacenamientoEnArchivoAlumnosRecuperan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                almacenamientoEnArchivoAlumnosRecuperanActionPerformed(evt);
            }
        });

        verMejoresAlumnosPorAño.setText("Ver mejores alumnos del establecimiento");
        verMejoresAlumnosPorAño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verMejoresAlumnosPorAñoActionPerformed(evt);
            }
        });

        verDocenteDictaMateria.setText("Ver docente que dicta una materia");
        verDocenteDictaMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDocenteDictaMateriaActionPerformed(evt);
            }
        });

        verMateriaConMasAlumnosARendir.setText("Ver materia que tiene mas alumnos a rendir");
        verMateriaConMasAlumnosARendir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verMateriaConMasAlumnosARendirActionPerformed(evt);
            }
        });

        almacenamientoArchivoAlumnosPindeReadmision.setText("Almacenamiento de alumnos que piden readmision");
        almacenamientoArchivoAlumnosPindeReadmision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                almacenamientoArchivoAlumnosPindeReadmisionActionPerformed(evt);
            }
        });

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        jLabel3.setText("Francisco, Gil");

        jLabel4.setText("Juan Pablo,Imperiale");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ingresarDocente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 250, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ingresarAlumnoPorPantalla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ingresarAlumnoPorArchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(calcularPromedioGeneral)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mostrarLibretaAlumno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(almacenamientoEnArchivoAlumnosRecuperan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(verMejoresAlumnosPorAño)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(verDocenteDictaMateria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(verMateriaConMasAlumnosARendir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(almacenamientoArchivoAlumnosPindeReadmision)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Salir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 340, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(modificarNotaAlumnoCuatrimestre)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(ingresarDocente, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addGap(9, 9, 9)
                .addComponent(ingresarAlumnoPorPantalla, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingresarAlumnoPorArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modificarNotaAlumnoCuatrimestre, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calcularPromedioGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarLibretaAlumno, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(almacenamientoEnArchivoAlumnosRecuperan, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verMejoresAlumnosPorAño, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verDocenteDictaMateria, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verMateriaConMasAlumnosARendir, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(almacenamientoArchivoAlumnosPindeReadmision, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void ingresarDocenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarDocenteActionPerformed
  new IngresarDocente().setVisible(true);
}//GEN-LAST:event_ingresarDocenteActionPerformed

private void ingresarAlumnoPorPantallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarAlumnoPorPantallaActionPerformed
    new IngresarAlumno().setVisible(true);
}//GEN-LAST:event_ingresarAlumnoPorPantallaActionPerformed

private void ingresarAlumnoPorArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarAlumnoPorArchivoActionPerformed
    new IngresarAlumnoPorArchivo().setVisible(true);
}//GEN-LAST:event_ingresarAlumnoPorArchivoActionPerformed

private void modificarNotaAlumnoCuatrimestreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarNotaAlumnoCuatrimestreActionPerformed
new ModificarNotasdeAlumno().setVisible(true);
}//GEN-LAST:event_modificarNotaAlumnoCuatrimestreActionPerformed

private void calcularPromedioGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularPromedioGeneralActionPerformed
new CalculoPromedioGeneral().setVisible(true);
}//GEN-LAST:event_calcularPromedioGeneralActionPerformed

    private void mostrarLibretaAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarLibretaAlumnoActionPerformed
new MostrarLibretaAlumno().setVisible(true);
    }//GEN-LAST:event_mostrarLibretaAlumnoActionPerformed

    private void almacenamientoEnArchivoAlumnosRecuperanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_almacenamientoEnArchivoAlumnosRecuperanActionPerformed
int j;
  try{
File archivoRecuperan = new File ("data/recuperan.txt");
FileWriter escribe = new FileWriter (archivoRecuperan, false);
BufferedWriter escribo = new BufferedWriter (escribe);

    for (i=0; i<AdministracionEscolar.mapeoMaterias.size(); i++){
        escribo.write("----------------------------------------------------");
        escribo.write("Rinden "+AdministracionEscolar.mapeoMaterias.get(i)+":"+"\n");
        for (j=0; j<AdministracionEscolar.listaAlumnos1.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                escribo.write(AdministracionEscolar.listaAlumnos1.get(j).toString());
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos2.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                escribo.write(AdministracionEscolar.listaAlumnos2.get(j).toString());
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos3.size(); j++){
            if (AdministracionEscolar.listaAlumnos3.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                escribo.write(AdministracionEscolar.listaAlumnos3.get(j).toString());
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos4.size(); j++){
            if (AdministracionEscolar.listaAlumnos4.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                escribo.write(AdministracionEscolar.listaAlumnos4.get(j).toString());
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos5.size(); j++){
            if (AdministracionEscolar.listaAlumnos5.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                escribo.write(AdministracionEscolar.listaAlumnos5.get(j).toString());
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos6.size(); j++){
            if (AdministracionEscolar.listaAlumnos6.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                escribo.write(AdministracionEscolar.listaAlumnos6.get(j).toString());
            }
        }
            
        }

escribo.close();
escribe.close();
new AccionRealizada().setVisible(true);
}
catch (IOException e) {
    System.out.println(e.getMessage());
}

    }//GEN-LAST:event_almacenamientoEnArchivoAlumnosRecuperanActionPerformed

    private void almacenamientoArchivoAlumnosPindeReadmisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_almacenamientoArchivoAlumnosPindeReadmisionActionPerformed

        List <Alumno> listaReadmision = new ArrayList <Alumno>();
        //BUSCA LOS ALUMNOS QUE NECESITAN READMISION
        // Y LOS ALMACENA EN UNA LISTA
for (i=0; i<AdministracionEscolar.listaAlumnos1.size();i++){
    if(AdministracionEscolar.listaAlumnos1.get(i).getInasistencias()>15){
        listaReadmision.add(AdministracionEscolar.listaAlumnos1.get(i));
    }
}
for (i=0; i<AdministracionEscolar.listaAlumnos2.size();i++){
    if(AdministracionEscolar.listaAlumnos2.get(i).getInasistencias()>15){
        listaReadmision.add(AdministracionEscolar.listaAlumnos2.get(i));
    }
}
for (i=0; i<AdministracionEscolar.listaAlumnos3.size();i++){
    if(AdministracionEscolar.listaAlumnos3.get(i).getInasistencias()>15){
        listaReadmision.add(AdministracionEscolar.listaAlumnos3.get(i));
    }
}
for (i=0; i<AdministracionEscolar.listaAlumnos4.size();i++){
    if(AdministracionEscolar.listaAlumnos4.get(i).getInasistencias()>15){
        listaReadmision.add(AdministracionEscolar.listaAlumnos4.get(i));
    }
}
for (i=0; i<AdministracionEscolar.listaAlumnos5.size();i++){
    if(AdministracionEscolar.listaAlumnos5.get(i).getInasistencias()>15){
        listaReadmision.add(AdministracionEscolar.listaAlumnos5.get(i));
    }
}
for (i=0; i<AdministracionEscolar.listaAlumnos6.size();i++){
    if(AdministracionEscolar.listaAlumnos6.get(i).getInasistencias()>15){
        listaReadmision.add(AdministracionEscolar.listaAlumnos6.get(i));
    }
}
//CREA EL ARCHIVO Y ALMACENA LOS ALUMNOS//
try{
File archivoReadmision = new File ("data/readmision.txt");
FileWriter escribe = new FileWriter (archivoReadmision, false);
BufferedWriter escribo = new BufferedWriter (escribe);
for (i=0; i<listaReadmision.size(); i++) {
    escribo.write(listaReadmision.get(i).toString());
}
escribo.close();
escribe.close();
}
catch (IOException e) {
    new Error().setVisible(true);
    System.out.println(e.getMessage());
}
new AccionRealizada().setVisible(true);
    }//GEN-LAST:event_almacenamientoArchivoAlumnosPindeReadmisionActionPerformed

    private void verDocenteDictaMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDocenteDictaMateriaActionPerformed
new VerDocenteQueDictaUnaMateria().setVisible(true);
    }//GEN-LAST:event_verDocenteDictaMateriaActionPerformed

    private void verMejoresAlumnosPorAñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verMejoresAlumnosPorAñoActionPerformed
if (((  AdministracionEscolar.listaAlumnos1.isEmpty())||(AdministracionEscolar.listaAlumnos2.isEmpty())||(AdministracionEscolar.listaAlumnos3.isEmpty())||
        (AdministracionEscolar.listaAlumnos4.isEmpty())||(AdministracionEscolar.listaAlumnos5.isEmpty())||(AdministracionEscolar.listaAlumnos6.isEmpty()))){
        new Error().setVisible(true);
    }
else{
        List <Alumno> listaMejoresAlumnos = new ArrayList <Alumno>();
        MejoresAlumnosPorAño ventana = new MejoresAlumnosPorAño();
        ventana.setVisible(true);
    Collections.sort(AdministracionEscolar.listaAlumnos1);
    Collections.sort(AdministracionEscolar.listaAlumnos2);
    Collections.sort(AdministracionEscolar.listaAlumnos3);
    Collections.sort(AdministracionEscolar.listaAlumnos4);
    Collections.sort(AdministracionEscolar.listaAlumnos5);
    Collections.sort(AdministracionEscolar.listaAlumnos6);
    
    ventana.setPrimerAño(AdministracionEscolar.listaAlumnos1.get(0).toString());
    listaMejoresAlumnos.add(AdministracionEscolar.listaAlumnos1.get(0));
    ventana.setSegundoAño(AdministracionEscolar.listaAlumnos2.get(0).toString());
    listaMejoresAlumnos.add(AdministracionEscolar.listaAlumnos2.get(0));
    ventana.setTercerAño(AdministracionEscolar.listaAlumnos3.get(0).toString());
    listaMejoresAlumnos.add(AdministracionEscolar.listaAlumnos3.get(0));
    ventana.setCuartoAño(AdministracionEscolar.listaAlumnos4.get(0).toString());
    listaMejoresAlumnos.add(AdministracionEscolar.listaAlumnos4.get(0));
    ventana.setQuintoAño(AdministracionEscolar.listaAlumnos5.get(0).toString());
    listaMejoresAlumnos.add(AdministracionEscolar.listaAlumnos5.get(0));
    ventana.setSextoAño(AdministracionEscolar.listaAlumnos6.get(0).toString());
    listaMejoresAlumnos.add(AdministracionEscolar.listaAlumnos6.get(0));
    
    Collections.sort(listaMejoresAlumnos);
    ventana.setMejorAlumnoDelColegio(listaMejoresAlumnos.get(0).toString());
}
    
    }//GEN-LAST:event_verMejoresAlumnosPorAñoActionPerformed

private void verMateriaConMasAlumnosARendirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verMateriaConMasAlumnosARendirActionPerformed
    int j;
    int contador[]= new int [9];
    for (i=0; i<9; i++){
        contador[i]=0;
    }
    
    for (i=0; i<AdministracionEscolar.mapeoMaterias.size(); i++){
        for (j=0; j<AdministracionEscolar.listaAlumnos1.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]=contador[i]+1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos2.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]=contador[i]+1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos3.size(); j++){
            if (AdministracionEscolar.listaAlumnos3.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]=contador[i]+1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos4.size(); j++){
            if (AdministracionEscolar.listaAlumnos4.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]=contador[i]+1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos5.size(); j++){
            if (AdministracionEscolar.listaAlumnos5.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]=contador[i]+1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos6.size(); j++){
            if (AdministracionEscolar.listaAlumnos6.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]=contador[i]+1;
            }
        }
            
        }
    
   /* for (i=0; i<AdministracionEscolar.mapeoMaterias.size(); i++){
        for (j=0; j<AdministracionEscolar.listaAlumnos1.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]= contador[i] +1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos2.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]= contador[i] +1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos3.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]= contador[i] +1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos4.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]= contador[i] +1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos5.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]= contador[i] +1;
            }
        }
        for (j=0; j<AdministracionEscolar.listaAlumnos6.size(); j++){
            if (AdministracionEscolar.listaAlumnos1.get(j).materiasCursa[i].calculaPromedioPorMateria()<7){
                contador[i]= contador[i] +1;
            }
        }
            
        }
     * 
     */
    
    int aux=contador[0];
    int posicionDelMayor=0;
    for (i=0; i<9;i++){
        if (contador[i]>aux){
            aux= contador[i];
            posicionDelMayor= i;
            
        }
    
    }
    VerMateriaQueTieneMasAlumnosARendir ventana = new VerMateriaQueTieneMasAlumnosARendir();
    ventana.setVisible(true);
    ventana.setMateria(AdministracionEscolar.mapeoMaterias.get(posicionDelMayor).toString()
            +"\n"+"con "+contador[posicionDelMayor]+" alumnos");
    
}//GEN-LAST:event_verMateriaConMasAlumnosARendirActionPerformed

private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        
        int j;
        try{
FileWriter escribe = new FileWriter (AdministracionEscolar.listaAlumnos, false);
BufferedWriter escribo = new BufferedWriter (escribe);

    
    for (i=0; i<AdministracionEscolar.listaAlumnos1.size(); i++){
        escribo.write(AdministracionEscolar.listaAlumnos1.get(i).toString());
        for (j=0; j<AdministracionEscolar.mapeoMaterias.size(); j++){
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos1.get(i).materiasCursa[j].getNota1())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos1.get(i).materiasCursa[j].getNota2())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos1.get(i).materiasCursa[j].getNota3())+"\n");
        }
    }
    for (i=0; i<AdministracionEscolar.listaAlumnos2.size(); i++){
        escribo.write(AdministracionEscolar.listaAlumnos2.get(i).toString());
        for (j=0; j<AdministracionEscolar.mapeoMaterias.size(); j++){
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos2.get(i).materiasCursa[j].getNota1())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos2.get(i).materiasCursa[j].getNota2())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos2.get(i).materiasCursa[j].getNota3())+"\n");
        }
    }
    for (i=0; i<AdministracionEscolar.listaAlumnos3.size(); i++){
        escribo.write(AdministracionEscolar.listaAlumnos3.get(i).toString());
        for (j=0; j<AdministracionEscolar.mapeoMaterias.size(); j++){
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos3.get(i).materiasCursa[j].getNota1())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos3.get(i).materiasCursa[j].getNota2())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos3.get(i).materiasCursa[j].getNota3())+"\n");
        }
    }
    for (i=0; i<AdministracionEscolar.listaAlumnos4.size(); i++){
        escribo.write(AdministracionEscolar.listaAlumnos4.get(i).toString());
        for (j=0; j<AdministracionEscolar.mapeoMaterias.size(); j++){
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos4.get(i).materiasCursa[j].getNota1())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos4.get(i).materiasCursa[j].getNota2())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos4.get(i).materiasCursa[j].getNota3())+"\n");
        }
    }
    for (i=0; i<AdministracionEscolar.listaAlumnos5.size(); i++){
        escribo.write(AdministracionEscolar.listaAlumnos5.get(i).toString());
        for (j=0; j<AdministracionEscolar.mapeoMaterias.size(); j++){
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos5.get(i).materiasCursa[j].getNota1())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos5.get(i).materiasCursa[j].getNota2())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos5.get(i).materiasCursa[j].getNota3())+"\n");
        }
    }
    for (i=0; i<AdministracionEscolar.listaAlumnos6.size(); i++){
        escribo.write(AdministracionEscolar.listaAlumnos6.get(i).toString());
        for (j=0; j<AdministracionEscolar.mapeoMaterias.size(); j++){
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos6.get(i).materiasCursa[j].getNota1())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos6.get(i).materiasCursa[j].getNota2())+"\n");
            escribo.write(Integer.toString(AdministracionEscolar.listaAlumnos6.get(i).materiasCursa[j].getNota3())+"\n");
        }
    }
    escribo.close();
    escribe.close();
        }
        
        catch (IOException e){
            System.out.println(e.getMessage());
        }
        
        try{
FileWriter escribe = new FileWriter (AdministracionEscolar.listaDocentesArchivo, false);
BufferedWriter escribo = new BufferedWriter (escribe);

    for (i=0; i<AdministracionEscolar.listaDocentes.size(); i++){
        escribo.write(AdministracionEscolar.listaDocentes.get(i).toString());
    }
    escribo.close();
    escribe.close();
        }
    catch (IOException e){
            System.out.println(e.getMessage());
        }
        
    dispose();
}//GEN-LAST:event_SalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Menu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Salir;
    private javax.swing.JButton almacenamientoArchivoAlumnosPindeReadmision;
    private javax.swing.JButton almacenamientoEnArchivoAlumnosRecuperan;
    private javax.swing.JButton calcularPromedioGeneral;
    private javax.swing.JButton ingresarAlumnoPorArchivo;
    private javax.swing.JButton ingresarAlumnoPorPantalla;
    private javax.swing.JButton ingresarDocente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton modificarNotaAlumnoCuatrimestre;
    private javax.swing.JButton mostrarLibretaAlumno;
    private javax.swing.JButton verDocenteDictaMateria;
    private javax.swing.JButton verMateriaConMasAlumnosARendir;
    private javax.swing.JButton verMejoresAlumnosPorAño;
    // End of variables declaration//GEN-END:variables
}
